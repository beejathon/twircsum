// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Message {
    id        String      @id @default(uuid())
    text      String  
    createdAt DateTime @default(now())
    authorId  String
    author    User     @relation(fields: [authorId], references: [id])
    channelId String
    channel   Channel  @relation(fields: [channelId], references: [id])

    @@index([text])
    @@index([authorId])
    @@index([channelId])
}

model Channel {
    id        String      @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    ownerId   String
    owner     User     @relation("ChannelOwner", fields: [ownerId], references: [id])
    messages  Message[]
    users     User[] @relation("ChannelUser")

    @@index([ownerId])
}

model DirectMessage {
    id        String      @id @default(uuid())
    text      String
    createdAt DateTime @default(now())
    authorId  String
    author    User     @relation(fields: [authorId], references: [id])
    chatId    String
    chat      DirectMessageChat @relation(fields: [chatId], references: [id])
    
    @@index([text])
    @@index([authorId])
    @@index([chatId])
}

model DirectMessageChat {
    id        String      @id @default(uuid())
    createdAt DateTime @default(now())
    messages  DirectMessage[]
    users     User[] @relation("DirectMessageChatUser")

}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    messages      Message[]
    channels      Channel[] @relation("ChannelUser")
    channelsOwned Channel[] @relation("ChannelOwner")
    directMessageChats DirectMessageChat[] @relation("DirectMessageChatUser")
    directMessages     DirectMessage[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
